{
  "hash": "f99bfe3af77c7e55c17807b9185929bf",
  "result": {
    "markdown": "---\ntitle: \"数据类型和数据结构\"\nknitr:\n  opts_chunk:\n    comment: \"#>\"\n    collapse: true\n---\n\n\n# 数据类型\n\n**数据类型（mode）**：表示对象在计算机内存中的存储形式\n\n## numeric -- 数值型（integer/double）\n\ninteger -- 整型 L\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-1_e7b3eac7cb3f971e152c4a64a445f2fd'}\n\n```{.r .cell-code}\nmode(4.3)\n#> [1] \"numeric\"\nclass(4.3)\n#> [1] \"numeric\"\nmode(1L)\n#> [1] \"numeric\"\nclass(1L)\n#> [1] \"integer\"\n```\n:::\n\n\n## character -- 字符型\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-2_2d535bb1b17eee26633640edbfdd44d3'}\n\n```{.r .cell-code}\nmode(c(\"car\"))\n#> [1] \"character\"\nclass(\"car\")\n#> [1] \"character\"\n```\n:::\n\n\n## logical -- 逻辑型\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-3_01f5907c505f1e314f7ccdc021c18aa5'}\n\n```{.r .cell-code}\nmode(c(TRUE,FALSE))\n#> [1] \"logical\"\nclass(c(TRUE,FALSE))\n#> [1] \"logical\"\n```\n:::\n\n\n## complex -- 复数型\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-4_57f063ffbc18773a67167d3dd07fc012'}\n\n```{.r .cell-code}\n\nmode(c(1+2i,3-4i)) \n#> [1] \"complex\"\nclass(c(1+2i,3-4i))\n#> [1] \"complex\"\n```\n:::\n\n\n## raw型\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-5_2fbc77dc20b8404082d19fdeacbfff75'}\n\n```{.r .cell-code}\ncharToRaw(\"abcde12345\") #字符串中每个字符的原始存储格式（十六进制？）\n#>  [1] 61 62 63 64 65 31 32 33 34 35\nmode(charToRaw(\"abcde12345\")) \n#> [1] \"raw\"\nclass(charToRaw(\"abcde12345\"))\n#> [1] \"raw\"\n```\n:::\n\n\n# 数据结构\n\n**class**：是一种基于*面向对象*的R的抽象类型划分,或者理解为一种数据结构。\n\n## vector\n\n向量,同一类元素的集合。 `?c      #Combine Values into a Vector or List`\n\n| R中没有标量（scalar），只含一个元素的向量\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-6_dc26ad1b3d0148ffb671b894a6274e15'}\n\n```{.r .cell-code}\n#单元素向量\n1 == c(1)\n#> [1] TRUE\nis.vector(1)\n#> [1] TRUE\n  \n\"a\"\n#> [1] \"a\"\nis.vector(\"a\")\n#> [1] TRUE\n\n#使用函数c()创建向量\n\nc(1)\n#> [1] 1\nc(1,2,3,4,5)\n#> [1] 1 2 3 4 5\nc(\"a\",\"b\",\"c\")\n#> [1] \"a\" \"b\" \"c\"\n```\n:::\n\n\n## factor\n\n因子，分类变量，其中每个级别都是一类。`?factor` `factor(vector,ordered=FALSE,levels=c(v1,v2,…),labels= ,...)` ，在内存中以整数向量`c(1,2,3,...,k)`存储。\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-7_7d439d5ba15097a7b25e75b16ae52d90'}\n\n```{.r .cell-code}\n# 存储形式\nclass(factor((c(1,2,3)))) \n#> [1] \"factor\"\nmode(factor((c(1,2,3)))) \n#> [1] \"numeric\"\n\n# 名义变量 nominal variable\ndiabetes<-c(\"t1\",\"t2\",\"t1\",\"t1\") \nstr(diabetes)\n#>  chr [1:4] \"t1\" \"t2\" \"t1\" \"t1\"\ndiabetes<-factor(diabetes)\nstr(diabetes)\n#>  Factor w/ 2 levels \"t1\",\"t2\": 1 2 1 1\n\n# 顺序变量 ordinal variable     默认水平根据字母顺序而定\nstatus<-c(\"poor\",\"better\",\"best\",\"poor\")\nstatus<-factor(status,ordered = TRUE) \nstr(status) \n#>  Ord.factor w/ 3 levels \"best\"<\"better\"<..: 3 2 1 3\nstatus<-factor(status,ordered =TRUE,levels = c(\"poor\",\"better\",\"best\")) \nstr(status) \n#>  Ord.factor w/ 3 levels \"poor\"<\"better\"<..: 1 2 3 1\n\n\n#改变外在标签\nsex<-c(1,2,2,1)\nsex\n#> [1] 1 2 2 1\nsex<-factor(sex,levels=c(1,2),labels = c(\"男\",\"女\")) \nstr(sex) \n#>  Factor w/ 2 levels \"男\",\"女\": 1 2 2 1\nsex\n#> [1] 男 女 女 男\n#> Levels: 男 女\n\nleadership <- read_csv(\"data/leadership.txt\") |> column_to_rownames(var = \"id\")\n#> Rows: 5 Columns: 10\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (4): id, date, country, gender\n#> dbl (6): age, q1, q2, q3, q4, q5\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n# 连续型变量→因子\nleadership$agecat<-cut(leadership$age,\n                    breaks = c(0,18,45,65,Inf),\n                    labels=c(\"minor\",\"young\",\"middle_age\",\"elder\"),\n                    include.lowest = TRUE,\n                    right = TRUE\n                    )\nleadership$agecat\n#> [1] young young young elder elder\n#> Levels: minor young middle_age elder\n```\n:::\n\n\n## date/datetime\n\n日期/日期时间 默认格式：`\"%Y-%m-%d\" xxxx-xx-xx,例如：2023-03-15`\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-8_ee19e350809602cbd30d7954a5f864fa'}\n\n```{.r .cell-code}\nmode(as.Date(\"2023-12-11\"))\n#> [1] \"numeric\"\nclass(as.Date(\"2023-12-11\")) \n#> [1] \"Date\"\n\ndate()\n#> [1] \"Mon Apr 15 00:43:19 2024\"\nSys.Date()\n#> [1] \"2024-04-15\"\nas.Date(c(\"02 14-2002\",\"01 04-2013\"),\"%m %d-%Y\") #以\"%m %d-%Y\"格式读入\n#> [1] \"2002-02-14\" \"2013-01-04\"\nformat(Sys.Date(),\"%Y/%m/%d\") #以\"%Y/%m/%d\"格式输出\n#> [1] \"2024/04/15\"\n\nleadership<-read_csv(\"data/leadership.txt\")\n#> Rows: 5 Columns: 10\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (4): id, date, country, gender\n#> dbl (6): age, q1, q2, q3, q4, q5\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nleadership\n#> # A tibble: 5 × 10\n#>   id    date     country gender   age    q1    q2    q3    q4    q5\n#>   <chr> <chr>    <chr>   <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1 Bob   10/24/14 US      M         29     5     4     5     5     5\n#> 2 Mary  10/28/14 US      F         44     3     5     2     5     5\n#> 3 Lily  10/01/14 UK      F         45     3     5     5     5     2\n#> 4 July  10/12/14 UK      M         68     3     3     4    NA    NA\n#> 5 Frank 05/01/14 UK      F         99     2     2     1     2     1\nleadership$date<-as.Date(leadership$date,\"%m/%d/%y\")\nleadership\n#> # A tibble: 5 × 10\n#>   id    date       country gender   age    q1    q2    q3    q4    q5\n#>   <chr> <date>     <chr>   <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1 Bob   2014-10-24 US      M         29     5     4     5     5     5\n#> 2 Mary  2014-10-28 US      F         44     3     5     2     5     5\n#> 3 Lily  2014-10-01 UK      F         45     3     5     5     5     2\n#> 4 July  2014-10-12 UK      M         68     3     3     4    NA    NA\n#> 5 Frank 2014-05-01 UK      F         99     2     2     1     2     1\n```\n:::\n\n\n## matrix\n\n矩阵，所有元素必须是同一类型。`?matrix`\n\n`matrix(data= ,nrow=1  ,ncol=1  ,byrow=FALSE ,dimnames=list(rnames,cnames) ,...)`\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-9_57a08b5352b6f8e392e79b7fe7228c91'}\n\n```{.r .cell-code}\nnum<-c(16,22,24,28)\nrnames<-c(\"R1\",\"R2\")\ncnames<-c(\"C1\",\"C2\")\nmymatrix<-matrix(num,nrow=2,ncol=2,byrow=TRUE,dimnames=list(rnames,cnames))\nmymatrix   \n#>    C1 C2\n#> R1 16 22\n#> R2 24 28\n```\n:::\n\n\n## array\n\n数组，所有元素必须是同一类型。`?array`\n\n`array(data,dim_numeric_vector=c(...),dimnames = list(dim1,dim2,...),...)`\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-10_ac501678a6ad54c4b14bba817f373c46'}\n\n```{.r .cell-code}\nv<-1:24 \ndim1<-c(\"A1\",\"A2\",\"A3\") \ndim2<-c(\"B1\",\"B2\",\"B3\",\"B4\")\ndim3<-c(\"C1\",\"C2\") \nmyarray<-array(v,c(3,4,2),dimnames = list(dim1,dim2,dim3)) \nmyarray\n#> , , C1\n#> \n#>    B1 B2 B3 B4\n#> A1  1  4  7 10\n#> A2  2  5  8 11\n#> A3  3  6  9 12\n#> \n#> , , C2\n#> \n#>    B1 B2 B3 B4\n#> A1 13 16 19 22\n#> A2 14 17 20 23\n#> A3 15 18 21 24\n```\n:::\n\n\n## data.frame/tibble\n\n数据框， 由列向量组成，每一列元素必须是同一类型，列与列之间长度必须相同，但类型可以不同。`?data.frame`\n\n`data.frame(name1=col_vector1,name2=col_vector2,...,row.names = ,...)` `?tibble`，`tibble()`是tidyverse风格的数据框，用法类似。\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-11_d798a9955724f177219920e0fa7b6fcd'}\n\n```{.r .cell-code}\nid<-c(1,2,3,4) \nage<-c(21,14,52,15) \ndiabetes<-c(\"t1\",\"t2\",\"t1\",\"t1\") \nstatus<-c(\"poor\",\"better\",\"best\",\"poor\") \npatient<-data.frame(patientID=id,age,diabetes,status,row.names = id) # 4个列向量组成数据框 \npatient |> rownames_to_column(var = \"ID\")\n#>   ID patientID age diabetes status\n#> 1  1         1  21       t1   poor\n#> 2  2         2  14       t2 better\n#> 3  3         3  52       t1   best\n#> 4  4         4  15       t1   poor\nmode(patient)\n#> [1] \"list\"\nclass(patient)\n#> [1] \"data.frame\"\n```\n:::\n\n\n## list\n\n列表，由以上各种数据结构组成`?list` `list(name1=object1,name2=object2,...)`\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-12_204f5a7e20a6f5983d2e06f5103b403f'}\n\n```{.r .cell-code}\nmylist<-list(title=\"My list\",\n             matr=matrix(c(\"a1\",\"b1\",\"a2\",\"b2\"),nrow=2,ncol=2,byrow=TRUE,\n                           dimnames = list(c(\"X1\",\"X2\"),c(\"Y1\",\"Y2\"))\n                         ),\n             df=data.frame(id=matrix(c(\"Lisa\",\"BOb\",\"John\",\"Jule\"),\n                                     nrow=4,ncol=1,byrow=TRUE\n                                     ),\n                           int=c(3,5,7,9),\n                           TF=c(T,T,T,F)\n                           ),\n             list=list(a=c(1,2,3),b=c(\"A\",\"B\"))\n             )\nmylist\n#> $title\n#> [1] \"My list\"\n#> \n#> $matr\n#>    Y1   Y2  \n#> X1 \"a1\" \"b1\"\n#> X2 \"a2\" \"b2\"\n#> \n#> $df\n#>     id int    TF\n#> 1 Lisa   3  TRUE\n#> 2  BOb   5  TRUE\n#> 3 John   7  TRUE\n#> 4 Jule   9 FALSE\n#> \n#> $list\n#> $list$a\n#> [1] 1 2 3\n#> \n#> $list$b\n#> [1] \"A\" \"B\"\nmode(mylist)\n#> [1] \"list\"\nclass(mylist)\n#> [1] \"list\"\n```\n:::\n\n\n## function\n\n\n::: {.cell hash='basic_data_type_class_cache/html/unnamed-chunk-13_68c611757ff24d15fd21869802c2bc1f'}\n\n```{.r .cell-code}\nmode(c)\n#> [1] \"function\"\nclass(c)\n#> [1] \"function\"\n\nmode(sum)\n#> [1] \"function\"\nclass(sum)\n#> [1] \"function\"\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}