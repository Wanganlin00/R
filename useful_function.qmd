# 实用函数

## subsetting operators

`[`，`$`，`[[`

S4 对象： `@` `slot`

### `[ ]`

```{r}
x <- c(2.1, 4.2, 3.3, 5.4)

x[c(3, 1)]

x[-c(3, 1)]

x[c(TRUE, TRUE, FALSE, FALSE)]
x[x > 3]

x[c(TRUE, FALSE)] # recycling rules 循环

x[]

x[0]
```

### `$`, `[[ ]]`

`$`是一个简写运算符, `x$y`大致相当于 `x[["y"]]` ,从左到右部分匹配

```{r}
x <- list(abc = 1)
x$a

x[["a"]]

options(warnPartialMatchDollar = TRUE)
x$a
```

### `subset()`, `sample()`

```{r eval=FALSE}
subset()
sample()
```

## 逻辑函数

```{r}
x<-c(2,3,5,1,4)
all(x>2)
any(x>2)
which(x>2)
which.max(x)
which.min(x)
mtcars[mtcars$gear == 5 & mtcars$cyl == 4, ]
```

## 布尔运算和集合运算

```{r}
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))

(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))

x1 & y1
base::intersect(x2, y2)

x1 | y1
base::union(x2,y2)

x1 & !y1
base::setdiff(x2, y2)

xor(x1, y1)
base::setdiff(base::union(x2, y2), base::intersect(x2, y2))
```

## 排序

```{r}
x <- c("b", "c", "a")
order(x)
x[order(x)]
```

```{r eval=FALSE}
sort()
dplyr::arrange()
```

## `seq()`, `rep()`, `cut()`

```{r}
seq(from=1,to=30,by=3)  # 生成一个序列
seq(from=1,to=30,length=10) 

rep(x = c("A",1,"B",2),times = 3)           #重复序列
rep(x = c("A",1,"B",2),times = c(1,2,3,4))
rep(x = c("A",1,"B",2),each = 3,times = 2)

x <- c(2.3,4.5,2.4,3,3.8,4,5.6,6.7,2.1,1.5)
cut( x = x, breaks =3,)                # 因子
cut( x = x, breaks =c(1,3,5,8),include.lowest = TRUE) 
```

## 数学函数

```{r}
x<-c(25,-4,3.66,3.42,-5.99)
abs(x)                       #绝对值
sqrt(x)                      #平方根
ceiling(x)                   #向上取整
floor(x)                     #向下取整
trunc(x)                     #整数部分
round(x,digits = 2)          #四舍五入，保留2位小数
signif(x,digits = 2)         #四舍五入，保留2有效数字
log(x,base=4)                #对x取以base为底的对数
log(x)                          #自然对数
log10(x)                        #常用对数
exp(x)                       #e指数函数
```

## 统计函数

```{r}
mean(x,trim = 0.05,na.rm = TRUE)     #算术平均值
median(x)                            #中位数
sd(x)                                #标准差
var(x)                               #方差
mad(x)                               #绝对中位差
quantile(x,probs = c(0,0.25,0.5,0.75,1))     #分位数
range(x)                             # 值域
scale(x,center = TRUE,scale = TRUE)  #标准化（均值为0、标准差为1）
scale(x,center = TRUE,scale =FALSE)  #中心化：减去均值


x <- c(1,3,5,7,9,11,13)
# Find the "previous" (lag()) or "next" (lead()) values in a vector
dplyr::lag(x,n=2)                      # n阶滞后
dplyr::lead(x,n=2)                     # n阶前移

# 滞后差分  lag阶滞后  difference阶差分
diff(x,lag = 1,difference=1)     # 隔0个值后位减前位，进行1次
diff(x,lag = 1,difference=2)     ## 隔0个值后位减前位，进行2次
diff(x,lag = 1,difference=3)     # 隔0个值后位减前位，进行3次

diff(x,lag = 2,difference=1)  # 隔1个值后位减前位，进行1次
diff(x,lag = 2,difference=2) ## 隔1个值后位减前位，进行2次
```

## 字符串函数

```{r}
# 正则表达式
substr(x="qwertyyuio",start = 2,stop=4)            #子串
sub(pattern = " ",replacement = ".",
    x="hello world",ignore.case = FALSE,fixed = FALSE)  #查找替换
grep(pattern = "v",x=c("a","v","D","A","f","J"),ignore.case = FALSE,fixed = FALSE)   # 查找,返回下标
strsplit(x="a.fa.fag",split = "\\.",fixed = FALSE)  # 分隔，\\转义字符


#
paste("x",c("a","b"),sep="+")   #连接
cat("hello","BOb","\b\n","\bIsn\' R","\t","GREAT?\n",sep = " " )

#
toupper("abc")              #大写转换
tolower("aaAGEErg")         #小写转换
```

## apply函数簇

### `apply()`

```{r}
apply(X = mtcars, MARGIN = 2, FUN = mean)

```

### `aggregate()`

```{r}
aggregate(x = mtcars,
          by = list(am=mtcars$am,cyl=mtcars$cyl),
          FUN = mean)  
aggregate(.~am+cyl,
          data = mtcars,
          FUN = mean)
aggregate(mpg~am+cyl,
          data = mtcars,
          FUN = summary)
```

### `by()`, `tapply()`

`by()`是应用于数据框的tapply的面向对象包装器。

```{r}
by(data = mtcars[,1:3],
   INDICES = list(cyl=mtcars$cyl),
   FUN = summary)

by(data = mtcars[,1:3],
   INDICES = factor(mtcars$cyl),
   FUN = function(x) lm( disp ~ mpg, data = x))

tapply(X = mtcars[,1:3],
       INDEX = list(cyl=mtcars$cyl),
       FUN = summary)
```

### `lapply()`, `sapply()`

`lapply()` returns a list of the same length as X,

`sapply()` is a user-friendly version and wrapper of `lapply()` by default returning a vector or matrix

```{r}
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
lapply(X = x,FUN = quantile)

sapply(x, quantile)
```

mapply for applying a function to multiple arguments,

rapply for a recursive version of lapply()

eapply for applying a function to each entry in an environment.

## 概率函数

形如`[dpqr]distribution_abbreviation`，其中密度函数`d`，分布函数`p`，分位数函数`q`，随机数生成函数`r`

```{r}
### 正态分布
dnorm(3,0,2)  #N(0,4)在 3 处的密度值
pnorm(1:3,0,2)#N(0,4)在1，2，3处的分布概率值
qnorm(1-0.025,0,1)# N(0,1)的上0.025分位数
rnorm(5,3,3)  # 生成5个服从N(3,9)的随机数


### 二项分布
1-sum(dbinom(0:1,400,0.02))# 命中率为0.02，独立射击400次，至少击中2次的概率
ggplot()



### 多元正态分布
mean<-c(230.7,146.7,3.6)
sigma<-matrix(c(15360.8,6721.2,-47.1,
                6721.2,4700.9,-16.5,
                -47.1,16.5,0.3),nrow = 3,ncol = 3)
library(MASS)
multi <- mvrnorm(500,mean,sigma)
head(multi)
```

### 正态分布

```{r}
norm <- function(xlim = c(-Inf,+Inf)){
  ggplot() + xlim(xlim) +
    geom_function(fun = dnorm, args = list(mean = 0, sd = 1), color="red")+
        scale_y_continuous(limits = c(0,1))+
    geom_function(fun = pnorm,color="blue")
}
norm(c(-5,5))

```

### 二项分布

```{r}
binom <- function(n,p){
    ggplot() +
        geom_line(data.frame(x = 0:n, 
                      y = dbinom(0:n, size = n, prob = p)), 
           mapping=aes(x = x, y = y),
           color="red")+
        geom_line(data.frame(x = 0:n, 
                      y = pbinom(0:n, size = n, prob = p)), 
           mapping=aes(x = x, y = y),
           color="blue")
}

binom(10,0.5)


```
